#include "cvode.h"

#include <cmath>
#include <iostream>
#include <mdspan>
#include <vector>

bool CVODE::propagate(BreakthroughState &state, std::vector<Component> &components, MixturePrediction &mixture,
                      size_t step)
{
  double t = static_cast<double>(step) * timeStep;
  double tNext = static_cast<double>(step + 1) * timeStep;
  sunrealtype tReturn = t;
  CVode(cvodeMem, tNext, u, &tReturn, CV_NORMAL);
  unpackState(state, u);
  unpackStateDot(state, uDot);
  return false;
}

void CVODE::initialize(BreakthroughState &state, std::vector<Component> &components, MixturePrediction &mixture)
{
  
  // initialize logger and context
  SUNContext_Create(SUN_COMM_NULL, &sunContext);
  SUNLogger_Create(SUN_COMM_NULL, 0, &sunLogger);
  SUNContext_SetLogger(sunContext, sunLogger);

  // create vector that cvode will operate on
  const sunindextype totalSize = static_cast<sunindextype>((2 * state.Ncomp + 3) * (state.Ngrid + 1));
  u = N_VNew_Serial(totalSize, sunContext);
  packState(state, u);
  uDot = N_VNew_Serial(totalSize, sunContext);
  packStateDot(state, uDot);

  cvodeMem = CVodeCreate(CV_BDF, sunContext);
  CVodeSetMaxNumSteps(cvodeMem, 1e8);

  SolverData solverData(&state, &components, &mixture);
  CVodeSetUserData(cvodeMem, &solverData);

  const sunrealtype t0 = 0.0;
  CVodeInit(cvodeMem, f, t0, u);

  CVodeSStolerances(cvodeMem, relativeTolerance, absoluteTolerance);
  solver = SUNNonlinSol_Newton(u, sunContext);
  CVodeSetNonlinearSolver(cvodeMem, solver);

  A = SUNDenseMatrix(totalSize, totalSize, sunContext);
  linSolver = SUNLinSol_Dense(u, A, sunContext);
  CVodeSetLinearSolver(cvodeMem, linSolver, A);

  CVodeSetJacFn(cvodeMem, nullptr);
}

void packState(BreakthroughState &state, N_Vector &u)
{
  sunrealtype *ptr = N_VGetArrayPointer(u);
  std::copy(state.adsorption.begin(), state.adsorption.end(), ptr);
  std::copy(state.totalPressure.begin(), state.totalPressure.end(), ptr);
  std::copy(state.temperature.begin(), state.temperature.end(), ptr);
  std::copy(state.moleFraction.begin(), state.moleFraction.end(), ptr);
  std::copy(state.wallTemperature.begin(), state.wallTemperature.end(), ptr);
}

void packStateDot(BreakthroughState &state, N_Vector &uDot)
{
  sunrealtype *ptr = N_VGetArrayPointer(uDot);
  std::copy(state.adsorptionDot.begin(), state.adsorptionDot.end(), ptr);
  std::copy(state.totalPressureDot.begin(), state.totalPressureDot.end(), ptr);
  std::copy(state.temperatureDot.begin(), state.temperatureDot.end(), ptr);
  std::copy(state.moleFractionDot.begin(), state.moleFractionDot.end(), ptr);
  std::copy(state.wallTemperatureDot.begin(), state.wallTemperatureDot.end(), ptr);
}

void unpackState(BreakthroughState &state, N_Vector &u)
{
  sunrealtype *ptr = N_VGetArrayPointer(u);

  std::copy(ptr, ptr + state.adsorption.size(), state.adsorption.begin());
  ptr += state.adsorption.size();

  std::copy(ptr, ptr + state.totalPressure.size(), state.totalPressure.begin());
  ptr += state.totalPressure.size();

  std::copy(ptr, ptr + state.temperature.size(), state.temperature.begin());
  ptr += state.temperature.size();

  std::copy(ptr, ptr + state.moleFraction.size(), state.moleFraction.begin());
  ptr += state.moleFraction.size();

  std::copy(ptr, ptr + state.wallTemperature.size(), state.wallTemperature.begin());
}

void unpackStateDot(BreakthroughState &state, N_Vector &uDot)
{
  sunrealtype *ptr = N_VGetArrayPointer(uDot);

  std::copy(ptr, ptr + state.adsorptionDot.size(), state.adsorptionDot.begin());
  ptr += state.adsorptionDot.size();

  std::copy(ptr, ptr + state.totalPressureDot.size(), state.totalPressureDot.begin());
  ptr += state.totalPressureDot.size();

  std::copy(ptr, ptr + state.temperatureDot.size(), state.temperatureDot.begin());
  ptr += state.temperatureDot.size();

  std::copy(ptr, ptr + state.moleFractionDot.size(), state.moleFractionDot.begin());
  ptr += state.moleFractionDot.size();

  std::copy(ptr, ptr + state.wallTemperatureDot.size(), state.wallTemperatureDot.begin());
}

static int f(sunrealtype t, N_Vector u, N_Vector uDot, void *user_data)
{
  auto *solverData = reinterpret_cast<SolverData *>(user_data);
  solverData->state->numCalls++;

  // ************************** Extracting process variables for current time *********************
  // Pointer pointing to first element of process variable container
  unpackState(*solverData->state, u);

  computeEquilibriumLoadings(*solverData->state, *solverData->mixture);
  computeVelocity(*solverData->state, *solverData->components);
  computeFirstDerivatives(*solverData->state, *solverData->components);

  packStateDot(*solverData->state, uDot);

  return 0;
}
